{"version":3,"sources":["server.js"],"names":["express","require","http","fs","socketIo","server","createServer","app","io","DATA_FILE_PATH","path","join","__dirname","rawData","readFileSync","loadData","JSON","parse","existsSync","lastUpdated","dailyStats","error","globalScore","Date","now","saveData","data","writeFileSync","stringify","console","use","get","req","res","sendFile","on","emit","socket","gameData","today","toISOString","split","setInterval","PORT","process","env","listen","log","concat"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,KAAOD,QAAQ,QADfD,SAAUC,QAAQ,aAGlBE,GAAKF,QAAQ,MAFbC,KAAOD,QAAQ,QACfG,IAAQJ,UAKRK,OAASH,KAAKI,aAAaC,KAJzBC,GAAGP,SAAQI,QAQbI,eAAiBC,KAAKC,KAAKC,UAAW,kBAH5C,SAAWR,WAOP,IAJEK,GAAAA,GAAAA,WAAsBE,gBAAgB,CAMhC,IAAME,EAAUV,GAAGW,aAAaL,eAAgB,QAHnDM,OAATC,KAAoBC,MAAAJ,GAERV,MAAGe,CACGL,YAAaC,EACnBK,YAAkBN,KAAAA,MACrBO,WAAA,IACD,MAAOC,GAEHF,OADAG,QAAAA,MADG,sBAAAD,GAEHF,CACAC,YAAY,EAHhBD,YAAAI,KAAAC,MAKKH,WAAO,KAEL,SAAPI,SAAAC,GAKH,IAGLvB,GAAAwB,cAAAlB,eAAAO,KAAAY,UAAAF,EAAA,KAAA,IAIM,MAAOL,GACLQ,QAAQR,MAAM,qBAAsBA,IAApCQ,IAAAA,SAAQR,WAQhBd,IAAIuB,IAAI9B,QAAO,OAAQU,KAAKC,KAAKC,UAAW,YAG5CL,IAAIwB,IAAI,IAAK,SAACC,EAAKC,GAHfH,EAAI9B,SAAOU,KAAAC,KAAQD,UAAUE,SAAW,iBAIxCqB,GAAAA,GAAIC,aAAcvB,SAAAA,GAGnBwB,EAAGC,KAAA,cAAeC,CACjBf,YAAAgB,SAAAhB,YACMH,YAAMmB,SAAenB,cAM3BkB,EAAOF,GAAG,QAAS,WACfG,SAAAhB,cAIMiB,IAAKA,GAAOhB,IAAJA,MAAWiB,cAAoBC,MAA/B,KAAd,GACKH,SAASlB,WAAWmB,GAElBD,SAAAlB,WAAAmB,KAFFD,SAASlB,WAAWmB,GAAQ,EAOjCD,SAASnB,YAAcI,KAAKC,MAG5BC,SAASa,UAILhB,GAAAA,KAAAA,cAAsBA,CACtBH,YAAamB,SAASnB,YAF1BA,YAAAmB,SAAAnB,gBAOJkB,EAAAF,GAAA,oBAAA,WAKJE,EAAAD,KAAA,qBAAAE,SAAAlB,gBACAsB,YAAY,WAINC,SAAOC,WACbvC,KAEC,IAFDsC,KAAAC,QAAAC,IAAAF,MAAA,IAAAtC,OAAOyC,OAAOH,KAAM,WAChBd,QAAQkB,IAAR,0BAAAC,OAAsCL","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst http = require('http');\r\nconst socketIo = require('socket.io');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = socketIo(server);\r\n\r\n// 데이터 파일 경로\r\nconst DATA_FILE_PATH = path.join(__dirname, 'clickData.json');\r\n\r\n// 데이터 로드 함수\r\nfunction loadData() {\r\n    try {\r\n        if (fs.existsSync(DATA_FILE_PATH)) {\r\n            const rawData = fs.readFileSync(DATA_FILE_PATH, 'utf8');\r\n            return JSON.parse(rawData);\r\n        }\r\n        return { \r\n            globalScore: 0, \r\n            lastUpdated: Date.now(),\r\n            dailyStats: {}\r\n        };\r\n    } catch (error) {\r\n        console.error('Error loading data:', error);\r\n        return { \r\n            globalScore: 0, \r\n            lastUpdated: Date.now(),\r\n            dailyStats: {}\r\n        };\r\n    }\r\n}\r\n\r\n// 데이터 저장 함수\r\nfunction saveData(data) {\r\n    try {\r\n        fs.writeFileSync(DATA_FILE_PATH, JSON.stringify(data, null, 2));\r\n    } catch (error) {\r\n        console.error('Error saving data:', error);\r\n    }\r\n}\r\n\r\n// 초기 데이터 로드\r\nlet gameData = loadData();\r\n\r\n// 정적 파일 제공 미들웨어 설정\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// 메인 라우트 설정\r\napp.get('/', (req, res) => {\r\n    res.sendFile(path.join(__dirname, 'public', 'index.html'));\r\n});\r\n\r\nio.on('connection', (socket) => {\r\n    // 연결 시 최신 데이터 전송\r\n    socket.emit('initialData', {\r\n        globalScore: gameData.globalScore,\r\n        lastUpdated: gameData.lastUpdated\r\n    });\r\n\r\n    // 클릭 이벤트 처리\r\n    socket.on('click', () => {\r\n        // 글로벌 스코어 증가\r\n        gameData.globalScore++;\r\n        \r\n        // 현재 날짜 기준 일일 통계 업데이트\r\n        const today = new Date().toISOString().split('T')[0];\r\n        if (!gameData.dailyStats[today]) {\r\n            gameData.dailyStats[today] = 1;\r\n        } else {\r\n            gameData.dailyStats[today]++;\r\n        }\r\n\r\n        // 마지막 업데이트 시간 갱신\r\n        gameData.lastUpdated = Date.now();\r\n\r\n        // 데이터 저장\r\n        saveData(gameData);\r\n\r\n        // 모든 클라이언트에게 업데이트 브로드캐스트\r\n        io.emit('scoreUpdate', {\r\n            globalScore: gameData.globalScore,\r\n            lastUpdated: gameData.lastUpdated\r\n        });\r\n    });\r\n\r\n    // 일일 통계 요청 핸들러\r\n    socket.on('requestDailyStats', () => {\r\n        socket.emit('dailyStatsResponse', gameData.dailyStats);\r\n    });\r\n});\r\n\r\n// 주기적인 데이터 백업 (옵션)\r\nsetInterval(() => {\r\n    saveData(gameData);\r\n}, 60000); // 1분마다 저장\r\n\r\nconst PORT = process.env.PORT || 3000;\r\nserver.listen(PORT, () => {\r\n    console.log(`Server running on port ${PORT}`);\r\n});\r\n"]}